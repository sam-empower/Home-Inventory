import express, { type Express, Request, Response, NextFunction } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { Client as NotionClient } from "@notionhq/client";
import { z } from "zod";
import { ZodError } from "zod";
import { fromZodError } from "zod-validation-error";
import compression from "compression";
import path from "path";

// Import the Notion service
const notionService = require('./notion');

// Validate Notion connection credentials
const notionConnectionSchema = z.object({
  integrationToken: z.string().min(1, "Integration token is required"),
  databaseId: z.string().min(1, "Database ID is required"),
});

export async function registerRoutes(app: Express): Promise<Server> {
  // Special route to serve test deployment app
  app.use('/deploy', express.static(path.join(import.meta.dirname, '..', 'deploy')));
  
  // Test deployment catch-all route for client-side routing
  app.get('/deploy/*', (req, res) => {
    res.sendFile(path.join(import.meta.dirname, '..', 'deploy', 'index.html'));
  });
  
  // Add compression middleware for faster mobile loading
  app.use(compression());

  // Get database info
  app.get('/api/notion/database-info', async (req, res) => {
    try {
      return res.json({
        success: true,
        connected: true,
        database: {
          id: process.env.NOTION_ROOMS_DATABASE_ID || "",
          title: "Rooms Database",
          lastSynced: new Date().toISOString()
        }
      });
    } catch (error: any) {
      console.error("Error getting database info:", error);
      return res.status(500).json({
        success: false,
        message: error.message
      });
    }
  });
  
  // Direct rooms endpoint with the room list from the Notion database
  app.get('/api/notion/rooms', async (req, res) => {
    try {
      console.log("Fetching rooms from Notion database");
      
      // Get rooms from Notion
      const rooms = await notionService.getRooms();
      
      // Return the rooms list
      return res.json({
        success: true,
        rooms
      });
    } catch (error: any) {
      console.error("Error getting rooms from Notion:", error);
      
      // Fall back to static room list if there's an error
      return res.json({
        success: true,
        rooms: [
          { id: 'bedroom', name: 'Bedroom' },
          { id: 'master-bathroom', name: 'Master Bathroom' }, 
          { id: 'office', name: 'Office' },
          { id: 'coffee-room', name: 'Coffee Room' }, 
          { id: 'living-area', name: 'Living Area' },
          { id: 'guest-suite', name: 'Guest Suite' },
          { id: 'harry-potter-closet', name: 'Harry Potter Closet' }
        ]
      });
    }
  });
  
  // Get items for a specific room
  app.get('/api/notion/room-items', async (req, res) => {
    const roomId = req.query.roomId;
    
    if (!roomId) {
      return res.status(400).json({
        success: false,
        message: "Room ID is required"
      });
    }
    
    console.log(`Fetching items for room: ${roomId}`);
    
    try {
      // Get items for the specified room from Notion
      const items = await notionService.getItemsByRoom(roomId as string);
      
      return res.json({
        success: true,
        items
      });
    } catch (error: any) {
      console.error(`Error getting items for room ${roomId}:`, error);
      return res.status(500).json({
        success: false,
        message: "Error fetching items from Notion",
        error: error.message
      });
    }
  });

  // Add diagnostics endpoint for troubleshooting production issues
  app.get('/api/diagnostics/env', (req, res) => {
    const requiredVars = ['NOTION_INTEGRATION_SECRET', 'NOTION_PAGE_URL', 'NOTION_ROOMS_DATABASE_ID'];
    const variables: Record<string, boolean> = {};
    
    // Check for required environment variables
    let allPresent = true;
    requiredVars.forEach(varName => {
      const isPresent = !!process.env[varName];
      variables[varName] = isPresent;
      if (!isPresent) {
        allPresent = false;
      }
    });
    
    res.json({
      success: allPresent,
      message: allPresent 
        ? 'All required environment variables are present' 
        : 'Some required environment variables are missing',
      variables
    });
  });

  // Create an HTTP server for the Express app
  const server = createServer(app);
  return server;
}